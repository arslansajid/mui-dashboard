import 'proxy-state-tree';
import { IConfiguration, Overmind, OvermindMock } from 'overmind';
import { IMutationCallback } from 'proxy-state-tree';
import * as react from 'react';
export declare type IReactComponent<P = any> = react.StatelessComponent<P> | react.ComponentClass<P> | react.ClassicComponentClass<P>;
export interface IConnect<Config extends IConfiguration> {
    overmind: {
        state: Overmind<Config>['state'];
        actions: Overmind<Config>['actions'];
        effects: Overmind<Config>['effects'];
        addMutationListener: Overmind<Config>['addMutationListener'];
        reaction: Overmind<Config>['reaction'];
        suspend: <T>(cb: () => T) => T;
    };
}
export declare const Provider: React.ProviderExoticComponent<React.ProviderProps<Overmind<IConfiguration> | OvermindMock<IConfiguration>>>;
export declare const createHook: <Config extends IConfiguration>() => () => {
    state: import("overmind").ResolveState<Config["state"]>;
    actions: import("overmind").ResolveActions<Config["actions"]>;
    effects: Config["effects"] & {};
    addMutationListener: (cb: IMutationCallback) => () => void;
    reaction: import("overmind").IReaction<Config>;
};
export declare const createConnect: <ThisConfig extends IConfiguration>() => <Props>(component: IReactComponent<Props & {
    overmind: {
        state: import("overmind").ResolveState<ThisConfig["state"]>;
        actions: import("overmind").ResolveActions<ThisConfig["actions"]>;
        reaction: import("overmind").IReaction<ThisConfig>;
    };
}>) => IReactComponent<Pick<Props & IConnect<Overmind<ThisConfig>>, ({ [P in keyof (Props & IConnect<Overmind<ThisConfig>>)]: P; } & {
    overmind: never;
} & {
    [x: string]: never;
    [x: number]: never;
})["overmind" | keyof Props]>>;
