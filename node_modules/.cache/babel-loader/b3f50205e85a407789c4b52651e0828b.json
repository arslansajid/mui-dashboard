{"ast":null,"code":"export class TrackStateTree {\n  constructor(master) {\n    this.pathDependencies = new Set();\n    this.shouldTrack = false;\n    this.trackPathListeners = [];\n    this.master = master;\n    this.proxifier = master.proxifier;\n    this.state = master.state;\n  }\n\n  trackPaths() {\n    const paths = new Set();\n\n    const listener = path => {\n      paths.add(path);\n    };\n\n    this.trackPathListeners.push(listener);\n    return () => {\n      this.trackPathListeners.splice(this.trackPathListeners.indexOf(listener), 1);\n      return paths;\n    };\n  }\n\n  canMutate() {\n    return false;\n  }\n\n  canTrack() {\n    return true;\n  }\n\n  addTrackingPath(path) {\n    if (!this.shouldTrack) {\n      return;\n    }\n\n    this.pathDependencies.add(path);\n\n    if (this.callback) {\n      this.master.addPathDependency(path, this.callback);\n    }\n  }\n\n  track(cb) {\n    this.master.changeTrackStateTree(this);\n    this.shouldTrack = true;\n    this.clearTracking();\n\n    if (cb) {\n      this.callback = (...args) => {\n        if (!this.callback) {\n          return;\n        }\n\n        cb(...args);\n      };\n    }\n\n    return this;\n  }\n\n  clearTracking() {\n    if (this.callback) {\n      for (let path of this.pathDependencies) {\n        this.master.removePathDependency(path, this.callback);\n      }\n    }\n\n    this.pathDependencies.clear();\n  }\n\n  stopTracking() {\n    this.shouldTrack = false;\n  }\n\n  trackScope(scope, cb) {\n    const previousPreviousTree = this.master.previousTree;\n    const previousCurrentTree = this.master.currentTree;\n    this.master.currentTree = this;\n    this.track(cb);\n    const result = scope(this);\n    this.master.currentTree = previousCurrentTree;\n    this.master.previousTree = previousPreviousTree;\n    this.stopTracking();\n    return result;\n  }\n\n  dispose() {\n    if (!this.callback) {\n      this.pathDependencies.clear();\n      return this;\n    }\n\n    this.clearTracking();\n    this.callback = null;\n    this.proxifier = this.master.proxifier;\n\n    if (this.master.currentTree === this) {\n      this.master.currentTree = null;\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../src/TrackStateTree.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IProxyStateTree,\n  ITrackStateTree,\n  ITrackCallback,\n  IProxifier,\n  ITrackScopedCallback,\n} from './types'\n\nexport class TrackStateTree<T extends object> implements ITrackStateTree<T> {\n  master: IProxyStateTree<T>\n  pathDependencies: Set<string> = new Set()\n  callback: ITrackCallback\n  shouldTrack: boolean = false\n  state: T\n  proxifier: IProxifier<T>\n  trackPathListeners: Array<(path: string) => void> = []\n  constructor(master: IProxyStateTree<T>) {\n    this.master = master\n    this.proxifier = master.proxifier\n    this.state = master.state\n  }\n  trackPaths() {\n    const paths = new Set<string>()\n    const listener = (path) => {\n      paths.add(path)\n    }\n    this.trackPathListeners.push(listener)\n\n    return () => {\n      this.trackPathListeners.splice(\n        this.trackPathListeners.indexOf(listener),\n        1\n      )\n\n      return paths\n    }\n  }\n  canMutate() {\n    return false\n  }\n  canTrack() {\n    return true\n  }\n  addTrackingPath(path: string) {\n    if (!this.shouldTrack) {\n      return\n    }\n\n    this.pathDependencies.add(path)\n\n    if (this.callback) {\n      this.master.addPathDependency(path, this.callback)\n    }\n  }\n  track(cb?: ITrackCallback) {\n    this.master.changeTrackStateTree(this)\n    this.shouldTrack = true\n\n    this.clearTracking()\n\n    if (cb) {\n      this.callback = (...args) => {\n        if (!this.callback) {\n          return\n        }\n        cb(...args)\n      }\n    }\n\n    return this\n  }\n  clearTracking() {\n    if (this.callback) {\n      for (let path of this.pathDependencies) {\n        this.master.removePathDependency(path, this.callback)\n      }\n    }\n\n    this.pathDependencies.clear()\n  }\n  stopTracking() {\n    this.shouldTrack = false\n  }\n  trackScope(scope: ITrackScopedCallback<T>, cb?: ITrackCallback) {\n    const previousPreviousTree = this.master.previousTree\n    const previousCurrentTree = this.master.currentTree\n    this.master.currentTree = this\n    this.track(cb)\n    const result = scope(this)\n    this.master.currentTree = previousCurrentTree\n    this.master.previousTree = previousPreviousTree\n    this.stopTracking()\n    return result\n  }\n  dispose() {\n    if (!this.callback) {\n      this.pathDependencies.clear()\n\n      return this\n    }\n\n    this.clearTracking()\n    this.callback = null\n    this.proxifier = this.master.proxifier\n\n    if (this.master.currentTree === this) {\n      this.master.currentTree = null\n    }\n\n    return this\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}