{"ast":null,"code":"var _jsxFileName = \"/Users/arslansajid/Documents/Github/corona/covid19-client/src/sections/ProgressChart/Component.js\";\nimport React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport clsx from 'clsx';\nimport LineChart from 'components/Charts/Line';\nimport Loading from 'components/Loading';\nimport LineChartButtons from 'components/Charts/Line/Button';\nimport { useNivoTheme } from 'theme';\nimport { convertToLineChartData, formatTooltipDate } from 'utils';\nimport { useAPI } from 'api';\nimport useStyles from './styles';\n\nconst PointSymbol = ({\n  size,\n  color,\n  borderWidth,\n  borderColor\n}) => /*#__PURE__*/React.createElement(\"g\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#fff\",\n  r: size / 2,\n  strokeWidth: borderWidth,\n  stroke: borderColor,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  r: size / 5,\n  strokeWidth: borderWidth,\n  stroke: borderColor,\n  fill: color,\n  fillOpacity: 0.35,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }\n}));\n\nfunction getYAxisValue(value, type) {\n  switch (type) {\n    case 'linear':\n      return value;\n\n    case 'log':\n      return Math.ceil(Math.exp(value));\n\n    case 'log10':\n      return Math.ceil(10 ** value);\n\n    default:\n      return value;\n  }\n}\n\nconst colors = ['#000000', '#e41a1c'];\n\nfunction getTooltipContent(point, type) {\n  return `${getYAxisValue(point.data.yFormatted, type)} ${point.serieId.toLowerCase()} on ${formatTooltipDate(point.data.x)}`;\n}\n\nexport default function ProgressChart() {\n  const [data, isLoading] = useAPI('/daily');\n  const [type, setType] = useState('log');\n  const classes = useStyles();\n  const theme = useNivoTheme();\n\n  function handleTypeChange(type) {\n    setType(type);\n  }\n\n  return isLoading ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.root, 'full-size'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: convertToLineChartData(data, type),\n    theme: theme,\n    type: type,\n    pointSymbol: PointSymbol,\n    colors: colors,\n    tooltip: ({\n      point\n    }) => getTooltipContent(point, type),\n    axisLeft: {\n      legendOffset: 12,\n      format: value => getYAxisValue(value, type)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.controls,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LineChartButtons, {\n    onChange: handleTypeChange,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })));\n}\n;","map":{"version":3,"sources":["/Users/arslansajid/Documents/Github/corona/covid19-client/src/sections/ProgressChart/Component.js"],"names":["React","useState","Paper","clsx","LineChart","Loading","LineChartButtons","useNivoTheme","convertToLineChartData","formatTooltipDate","useAPI","useStyles","PointSymbol","size","color","borderWidth","borderColor","getYAxisValue","value","type","Math","ceil","exp","colors","getTooltipContent","point","data","yFormatted","serieId","toLowerCase","x","ProgressChart","isLoading","setType","classes","theme","handleTypeChange","root","legendOffset","format","controls"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport clsx from 'clsx';\n\nimport LineChart from 'components/Charts/Line';\nimport Loading from 'components/Loading';\nimport LineChartButtons from 'components/Charts/Line/Button';\n\nimport { useNivoTheme } from 'theme';\nimport { convertToLineChartData, formatTooltipDate } from 'utils';\nimport { useAPI } from 'api';\n\nimport useStyles from './styles';\n\nconst PointSymbol = ({ size, color, borderWidth, borderColor }) => (\n  <g>\n    <circle fill=\"#fff\" r={size / 2} strokeWidth={borderWidth} stroke={borderColor} />\n    <circle\n      r={size / 5}\n      strokeWidth={borderWidth}\n      stroke={borderColor}\n      fill={color}\n      fillOpacity={0.35}\n    />\n  </g>\n);\n\nfunction getYAxisValue(value, type) {\n  switch(type) {\n    case 'linear': return value;\n    case 'log': return Math.ceil(Math.exp(value));\n    case 'log10': return Math.ceil(10 ** value);\n    default: return value;\n  }\n}\n\nconst colors = ['#000000', '#e41a1c'];\n\nfunction getTooltipContent(point, type) {\n  return `${getYAxisValue(point.data.yFormatted, type)} ${point.serieId.toLowerCase()} on ${formatTooltipDate(point.data.x)}`;\n}\n\nexport default function ProgressChart() {\n  const [data, isLoading] = useAPI('/daily');\n  const [type, setType] = useState('log');\n  const classes = useStyles();\n  const theme = useNivoTheme();\n\n  function handleTypeChange(type) {\n    setType(type);\n  }\n\n  return isLoading\n    ? <Loading />\n    : <div className={clsx(classes.root, 'full-size')}>\n      <LineChart\n        data={convertToLineChartData(data, type)}\n        theme={theme}\n        type={type}\n        pointSymbol={PointSymbol}\n        colors={colors}\n        tooltip={({ point }) => getTooltipContent(point, type)}\n        axisLeft={{\n          legendOffset: 12,\n          format: value => getYAxisValue(value, type),\n        }}\n      />\n      <Paper className={classes.controls}>\n        <LineChartButtons onChange={handleTypeChange} type={type} />\n      </Paper>\n    </div>\n};\n"]},"metadata":{},"sourceType":"module"}