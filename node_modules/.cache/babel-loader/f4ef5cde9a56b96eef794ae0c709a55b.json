{"ast":null,"code":"var _jsxFileName = \"/Users/arslansajid/Documents/Github/corona/covid19-client/src/components/Maps/World/Component.js\";\nimport React, { useState } from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\nimport Controls from 'components/Maps/Controls';\nimport TooltipContent from 'components/Maps/TooltipContent';\nimport { isMobile } from 'utils';\nimport { colorRanges, geoUrls, standardDistributionCriteria } from 'config';\nimport useStyles from './styles';\n\nconst getCountryValue = (country, setting, population) => {\n  if (!country) return 0;\n\n  if (standardDistributionCriteria.includes(setting)) {\n    return country[setting];\n  } else {\n    return country[setting.split('_')[1]] / population * 10000000;\n  }\n};\n\nconst colorScale = number => {\n  if (!number) return '#00ff00';\n  const range = colorRanges.find(({\n    min,\n    max\n  }) => number > min && number <= max);\n  const {\n    min,\n    max,\n    colorStart,\n    colorEnd\n  } = range;\n  const currentScaleLinear = scaleLinear().domain([min, max]).range([colorStart, colorEnd]);\n  return currentScaleLinear(number);\n};\n\nconst getMapStyles = color => ({\n  default: {\n    fill: color,\n    outline: \"none\"\n  },\n  hover: {\n    fill: \"#F53\",\n    outline: \"none\"\n  },\n  pressed: {\n    fill: \"#E42\",\n    outline: \"none\"\n  }\n});\n\nconst WorldMapChart = ({\n  covidData,\n  setting,\n  setTooltipContent,\n  by,\n  className,\n  center,\n  scale\n}) => {\n  const [_zoom, setZoom] = useState(2);\n  const classes = useStyles();\n\n  function handleZoomIn() {\n    if (_zoom >= 5) return;\n    setZoom(_zoom * 1.5);\n  }\n\n  function handleZoomOut() {\n    if (_zoom <= 1) return;\n    setZoom(_zoom / 1.5);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    projection: \"geoMercator\",\n    projectionConfig: {\n      scale\n    },\n    \"data-tip\": \"\",\n    className: \"full-size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    center: center,\n    zoom: _zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrls.world,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, ({\n    geographies\n  }) => geographies.map((geo, i) => {\n    const country = covidData.find(item => {\n      if (by === 'iso3') {\n        return item.iso3 === geo.properties.ISO_A3;\n      } else if (by === 'countryRegion') {\n        if (item.countryRegion === 'US') {\n          return geo.properties.NAME === 'United States of America';\n        } else {\n          return item.countryRegion === geo.properties.NAME;\n        }\n      } else return false;\n    });\n    return /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      onMouseEnter: () => {\n        setTooltipContent( /*#__PURE__*/React.createElement(TooltipContent, {\n          data: country,\n          additionName: !country && geo.properties.NAME,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 41\n          }\n        }));\n      },\n      onMouseLeave: () => {\n        setTooltipContent('');\n      },\n      style: getMapStyles(colorScale(getCountryValue(country, setting, geo.properties.POP_EST))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }\n    });\n  })))), /*#__PURE__*/React.createElement(Controls, {\n    onZoomIn: handleZoomIn,\n    onZoomOut: handleZoomOut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }));\n};\n\nWorldMapChart.defaultProps = {\n  by: 'iso3',\n  scale: 60,\n  center: [0, isMobile ? -45 : 25]\n};\nexport default WorldMapChart;","map":{"version":3,"sources":["/Users/arslansajid/Documents/Github/corona/covid19-client/src/components/Maps/World/Component.js"],"names":["React","useState","scaleLinear","ComposableMap","Geographies","Geography","ZoomableGroup","Controls","TooltipContent","isMobile","colorRanges","geoUrls","standardDistributionCriteria","useStyles","getCountryValue","country","setting","population","includes","split","colorScale","number","range","find","min","max","colorStart","colorEnd","currentScaleLinear","domain","getMapStyles","color","default","fill","outline","hover","pressed","WorldMapChart","covidData","setTooltipContent","by","className","center","scale","_zoom","setZoom","classes","handleZoomIn","handleZoomOut","root","world","geographies","map","geo","i","item","iso3","properties","ISO_A3","countryRegion","NAME","rsmKey","POP_EST","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { scaleLinear } from 'd3-scale';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from 'react-simple-maps';\n\nimport Controls from 'components/Maps/Controls';\nimport TooltipContent from 'components/Maps/TooltipContent';\n\nimport { isMobile } from 'utils';\nimport { colorRanges, geoUrls, standardDistributionCriteria } from 'config';\n\nimport useStyles from './styles';\n\nconst getCountryValue = (country, setting, population) => {\n  if (!country) return 0;\n\n  if (standardDistributionCriteria.includes(setting)) {\n    return country[setting];\n  } else {\n    return country[setting.split('_')[1]] / population * 10000000;\n  }\n}\n\nconst colorScale = number => {\n  if (!number) return '#00ff00';\n\n  const range = colorRanges.find(({ min, max }) => (number > min && number <= max));\n\n  const { min, max, colorStart, colorEnd } = range;\n\n  const currentScaleLinear = scaleLinear()\n    .domain([min, max])\n    .range([colorStart, colorEnd]);\n\n  return currentScaleLinear(number);\n}\n\nconst getMapStyles = color => ({\n  default: {\n    fill: color,\n    outline: \"none\",\n  },\n  hover: {\n    fill: \"#F53\",\n    outline: \"none\",\n  },\n  pressed: {\n    fill: \"#E42\",\n    outline: \"none\",\n  }\n});\n\nconst WorldMapChart = ({ covidData, setting, setTooltipContent, by, className, center, scale }) => {\n  const [_zoom, setZoom] = useState(2);\n  const classes = useStyles();\n\n  function handleZoomIn() {\n    if (_zoom >= 5) return;\n    setZoom(_zoom * 1.5);\n  }\n\n  function handleZoomOut() {\n    if (_zoom <= 1) return;\n    setZoom(_zoom / 1.5);\n  }\n\n  return (\n    <div className={classes.root}>\n      <ComposableMap\n        projection=\"geoMercator\"\n        projectionConfig={{ scale }}\n        data-tip=\"\"\n        className=\"full-size\"\n      >\n        <ZoomableGroup center={center} zoom={_zoom}>\n          <Geographies geography={geoUrls.world}>\n            {({ geographies }) =>\n              geographies.map((geo, i) => {\n                const country = covidData.find(item => {\n                  if (by === 'iso3') {\n                    return item.iso3 === geo.properties.ISO_A3;\n                  } else if (by === 'countryRegion') {\n                    if (item.countryRegion === 'US') {\n                      return geo.properties.NAME === 'United States of America';\n                    } else {\n                      return item.countryRegion === geo.properties.NAME;\n                    }\n\n                  } else return false;\n                });\n\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      setTooltipContent(<TooltipContent data={country} additionName={!country && geo.properties.NAME} />);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent('');\n                    }}\n                    style={getMapStyles(colorScale(getCountryValue(country, setting, geo.properties.POP_EST)))}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      <Controls onZoomIn={handleZoomIn} onZoomOut={handleZoomOut} />\n    </div>\n  );\n};\n\nWorldMapChart.defaultProps = {\n  by: 'iso3',\n  scale: 60,\n  center: [0, isMobile ? -45 : 25],\n};\n\nexport default WorldMapChart;\n"]},"metadata":{},"sourceType":"module"}