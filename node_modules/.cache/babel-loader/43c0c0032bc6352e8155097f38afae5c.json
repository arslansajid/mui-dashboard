{"ast":null,"code":"var _jsxFileName = \"/Users/arslansajid/Documents/Github/corona/mui-dashboard/src/components/Maps/USA/Component.js\";\nimport React, { useState } from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\nimport Controls from 'components/Maps/Controls';\nimport TooltipContent from 'components/Maps/TooltipContent';\nimport { isMobile } from 'utils';\nimport { colorRanges, geoUrls, standardDistributionCriteria } from 'config';\nimport useStyles from './styles';\n\nconst colorScale = number => {\n  if (!number) return '#00ff00';\n  const range = colorRanges.find(({\n    min,\n    max\n  }) => number > min && number <= max);\n  const {\n    min,\n    max,\n    colorStart,\n    colorEnd\n  } = range;\n  const currentScaleLinear = scaleLinear().domain([min, max]).range([colorStart, colorEnd]);\n  return currentScaleLinear(number);\n};\n\nconst getMapStyles = color => ({\n  default: {\n    fill: color,\n    outline: \"none\"\n  },\n  hover: {\n    fill: \"#F53\",\n    outline: \"none\"\n  },\n  pressed: {\n    fill: \"#E42\",\n    outline: \"none\"\n  }\n});\n\nconst getValue = (data, setting, population) => {\n  if (!data) return 0;\n\n  if (standardDistributionCriteria.includes(setting)) {\n    return data[setting];\n  } else {\n    return data[setting.split('_')[1]] / population * 10000000;\n  }\n};\n\nconst USAMap = ({\n  data,\n  dividedInto,\n  setting,\n  setTooltipContent\n}) => {\n  const [zoom, setZoom] = useState(1);\n  const classes = useStyles();\n\n  function handleZoomIn() {\n    if (zoom >= 5) return;\n    setZoom(zoom * 1.5);\n  }\n\n  function handleZoomOut() {\n    if (zoom <= 1) return;\n    setZoom(zoom / 1.5);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    projection: \"geoAlbersUsa\",\n    \"data-tip\": \"\",\n    className: \"full-size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    center: [-97, isMobile ? 30 : 40],\n    zoom: zoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrls.usa[dividedInto],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const current = data.find(item => item.fips === geo.id || item.admin2 === geo.properties.name);\n    return /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      onMouseEnter: () => {\n        setTooltipContent( /*#__PURE__*/React.createElement(TooltipContent, {\n          data: current,\n          additionName: !current && geo.properties.NAME,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 41\n          }\n        }));\n      },\n      onMouseLeave: () => {\n        setTooltipContent('');\n      },\n      style: getMapStyles(colorScale(getValue(current, setting, geo.properties.POP_EST))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }\n    });\n  })))), /*#__PURE__*/React.createElement(Controls, {\n    onZoomIn: handleZoomIn,\n    onZoomOut: handleZoomOut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default USAMap;","map":{"version":3,"sources":["/Users/arslansajid/Documents/Github/corona/mui-dashboard/src/components/Maps/USA/Component.js"],"names":["React","useState","scaleLinear","ComposableMap","Geographies","Geography","ZoomableGroup","Controls","TooltipContent","isMobile","colorRanges","geoUrls","standardDistributionCriteria","useStyles","colorScale","number","range","find","min","max","colorStart","colorEnd","currentScaleLinear","domain","getMapStyles","color","default","fill","outline","hover","pressed","getValue","data","setting","population","includes","split","USAMap","dividedInto","setTooltipContent","zoom","setZoom","classes","handleZoomIn","handleZoomOut","root","usa","geographies","map","geo","current","item","fips","id","admin2","properties","name","rsmKey","NAME","POP_EST"],"mappings":"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","sourcesContent":["import React, { useState, } from 'react';\n\nimport { scaleLinear } from 'd3-scale';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from 'react-simple-maps';\n\nimport Controls from 'components/Maps/Controls';\nimport TooltipContent from 'components/Maps/TooltipContent';\n\nimport { isMobile } from 'utils';\nimport { colorRanges, geoUrls, standardDistributionCriteria } from 'config';\n\nimport useStyles from './styles';\n\nconst colorScale = number => {\n  if (!number) return '#00ff00';\n\n  const range = colorRanges.find(({ min, max }) => (number > min && number <= max));\n\n  const { min, max, colorStart, colorEnd } = range;\n\n  const currentScaleLinear = scaleLinear()\n    .domain([min, max])\n    .range([colorStart, colorEnd]);\n\n  return currentScaleLinear(number);\n}\n\nconst getMapStyles = color => ({\n  default: {\n    fill: color,\n    outline: \"none\",\n  },\n  hover: {\n    fill: \"#F53\",\n    outline: \"none\",\n  },\n  pressed: {\n    fill: \"#E42\",\n    outline: \"none\",\n  }\n});\n\nconst getValue = (data, setting, population) => {\n  if (!data) return 0;\n\n  if (standardDistributionCriteria.includes(setting)) {\n    return data[setting];\n  } else {\n    return data[setting.split('_')[1]] / population * 10000000;\n  }\n}\n\nconst USAMap = ({ data, dividedInto, setting, setTooltipContent }) => {\n  const [zoom, setZoom] = useState(1);\n  const classes = useStyles();\n\n  function handleZoomIn() {\n    if (zoom >= 5) return;\n    setZoom(zoom * 1.5);\n  }\n\n  function handleZoomOut() {\n    if (zoom <= 1) return;\n    setZoom(zoom / 1.5);\n  }\n\n  return (\n    <div className={classes.root}>\n      <ComposableMap\n        projection=\"geoAlbersUsa\"\n        data-tip=\"\"\n        className=\"full-size\"\n      >\n        <ZoomableGroup center={[-97, isMobile ? 30 : 40]} zoom={zoom}>\n          <Geographies geography={geoUrls.usa[dividedInto]}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                const current = data.find(item => (item.fips === geo.id) || (item.admin2 === geo.properties.name));\n\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      setTooltipContent(<TooltipContent data={current} additionName={!current && geo.properties.NAME} />);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent('');\n                    }}\n                    style={getMapStyles(colorScale(getValue(current, setting, geo.properties.POP_EST)))}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      <Controls onZoomIn={handleZoomIn} onZoomOut={handleZoomOut} />\n    </div>\n  );\n};\n\nexport default USAMap;\n"]},"metadata":{},"sourceType":"module"}