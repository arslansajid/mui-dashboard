{"ast":null,"code":"var _jsxFileName = \"/Users/arslansajid/Documents/Github/corona/mui-dashboard/src/sections/Historical/Chart/Component.js\";\nimport React, { useState, useMemo } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport clsx from 'clsx';\nimport LineChart from 'components/Charts/Line';\nimport LineChartButtons from 'components/Charts/Line/Button';\nimport { useNivoTheme } from 'theme';\nimport { convertHistoricalToLineChartData, formatTooltipDate } from 'utils';\nimport useStyles from './styles';\n\nfunction getYAxisValue(value, type) {\n  switch (type) {\n    case 'linear':\n      return value;\n\n    case 'log':\n      return Math.ceil(Math.exp(value));\n\n    case 'log10':\n      return Math.ceil(10 ** value);\n\n    default:\n      return value;\n  }\n}\n\nfunction getTooltipContent(point, type, criterion) {\n  return `${getYAxisValue(point.data.yFormatted, type)} ${criterion} cases in ${point.serieId} on ${formatTooltipDate(point.data.x)}`;\n}\n\nconst colors = {\n  scheme: 'red_blue'\n};\nexport default function Chart({\n  data,\n  selected,\n  criterion,\n  currentDate\n}) {\n  const [type, setType] = useState('linear');\n  const classes = useStyles();\n  const theme = useNivoTheme();\n\n  function handleTypeChange(type) {\n    setType(type);\n  }\n\n  const _data = useMemo(_ => {\n    return convertHistoricalToLineChartData(data, type, criterion, selected, currentDate);\n  }, [data, type, criterion, selected, currentDate]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.root, 'full-size'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: _data,\n    theme: theme,\n    type: type,\n    colors: colors,\n    tooltip: ({\n      point\n    }) => getTooltipContent(point, type, criterion),\n    axisLeft: {\n      legendOffset: 12,\n      format: value => getYAxisValue(value, type)\n    },\n    legends: [],\n    enableArea: false,\n    motionStiffness: 145,\n    motionDamping: 20,\n    pointSize: 5,\n    pointBorderWidth: 1,\n    curve: \"monotoneX\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.controls,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LineChartButtons, {\n    onChange: handleTypeChange,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })));\n}\n;","map":{"version":3,"sources":["/Users/arslansajid/Documents/Github/corona/mui-dashboard/src/sections/Historical/Chart/Component.js"],"names":["React","useState","useMemo","Paper","clsx","LineChart","LineChartButtons","useNivoTheme","convertHistoricalToLineChartData","formatTooltipDate","useStyles","getYAxisValue","value","type","Math","ceil","exp","getTooltipContent","point","criterion","data","yFormatted","serieId","x","colors","scheme","Chart","selected","currentDate","setType","classes","theme","handleTypeChange","_data","_","root","legendOffset","format","controls"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport clsx from 'clsx';\n\nimport LineChart from 'components/Charts/Line';\nimport LineChartButtons from 'components/Charts/Line/Button';\n\nimport { useNivoTheme } from 'theme';\nimport { convertHistoricalToLineChartData, formatTooltipDate } from 'utils';\n\nimport useStyles from './styles';\n\nfunction getYAxisValue(value, type) {\n  switch(type) {\n    case 'linear': return value;\n    case 'log': return Math.ceil(Math.exp(value));\n    case 'log10': return Math.ceil(10 ** value);\n    default: return value;\n  }\n}\n\nfunction getTooltipContent(point, type, criterion) {\n  return `${getYAxisValue(point.data.yFormatted, type)} ${criterion} cases in ${point.serieId} on ${formatTooltipDate(point.data.x)}`;\n}\n\nconst colors = { scheme: 'red_blue' };\n\nexport default function Chart({ data, selected, criterion, currentDate }) {\n  const [type, setType] = useState('linear');\n  const classes = useStyles();\n  const theme = useNivoTheme();\n\n  function handleTypeChange(type) {\n    setType(type);\n  }\n\n  const _data = useMemo(_ => {\n    return convertHistoricalToLineChartData(data, type, criterion, selected, currentDate);\n  }, [data, type, criterion, selected, currentDate]);\n\n  return (\n    <div className={clsx(classes.root, 'full-size')}>\n      <LineChart\n        data={_data}\n        theme={theme}\n        type={type}\n        colors={colors}\n        tooltip={({ point }) => getTooltipContent(point, type, criterion)}\n        axisLeft={{\n          legendOffset: 12,\n          format: value => getYAxisValue(value, type),\n        }}\n        legends={[]}\n        enableArea={false}\n        motionStiffness={145}\n        motionDamping={20}\n        pointSize={5}\n        pointBorderWidth={1}\n        curve=\"monotoneX\"\n      />\n      <Paper className={classes.controls}>\n        <LineChartButtons onChange={handleTypeChange} type={type} />\n      </Paper>\n    </div>\n  );\n\n};\n"]},"metadata":{},"sourceType":"module"}