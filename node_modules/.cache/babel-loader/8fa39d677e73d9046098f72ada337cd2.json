{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { makeCancelable } from 'utils';\nexport default function useAPI(url, fake) {\n  const [state, setState] = useState({\n    data: null,\n    isLoading: true,\n    error: null\n  });\n  useEffect(_ => {\n    if (!fake) {\n      setState(state => ({ ...state,\n        isLoading: true\n      }));\n      const cancelable = makeCancelable(fetch(`${process.env.REACT_APP_API_URI}${url}`).then(res => res.json()));\n      cancelable.then(data => {\n        setState({\n          data,\n          isLoading: false,\n          error: null\n        });\n      }).catch(err => setState(state => ({ ...state,\n        error: err\n      })));\n      return _ => cancelable.cancel();\n    }\n  }, [setState, url, fake]);\n  const {\n    data,\n    isLoading,\n    error\n  } = state;\n  return [data, fake ? false : isLoading, error];\n}","map":{"version":3,"sources":["/Users/arslansajid/Documents/Github/corona/covid19-client/src/api/useAPI.js"],"names":["useState","useEffect","makeCancelable","useAPI","url","fake","state","setState","data","isLoading","error","_","cancelable","fetch","process","env","REACT_APP_API_URI","then","res","json","catch","err","cancel"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,cAAT,QAA+B,OAA/B;AAEA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AACjCQ,IAAAA,IAAI,EAAE,IAD2B;AAEjCC,IAAAA,SAAS,EAAE,IAFsB;AAGjCC,IAAAA,KAAK,EAAE;AAH0B,GAAD,CAAlC;AAMAT,EAAAA,SAAS,CAACU,CAAC,IAAI;AACb,QAAI,CAACN,IAAL,EAAW;AACTE,MAAAA,QAAQ,CAACD,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYG,QAAAA,SAAS,EAAE;AAAvB,OAAL,CAAN,CAAR;AACA,YAAMG,UAAU,GAAGV,cAAc,CAACW,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,GAAEZ,GAAI,EAAxC,CAAL,CAAgDa,IAAhD,CAAqDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA5D,CAAD,CAAjC;AAEAP,MAAAA,UAAU,CAACK,IAAX,CAAgBT,IAAI,IAAI;AACtBD,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IADO;AAEPC,UAAAA,SAAS,EAAE,KAFJ;AAGPC,UAAAA,KAAK,EAAE;AAHA,SAAD,CAAR;AAKD,OAND,EAMGU,KANH,CAMSC,GAAG,IAAId,QAAQ,CAACD,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYI,QAAAA,KAAK,EAAEW;AAAnB,OAAL,CAAN,CANxB;AAQA,aAAOV,CAAC,IAAIC,UAAU,CAACU,MAAX,EAAZ;AACD;AACF,GAfQ,EAeN,CAACf,QAAD,EAAWH,GAAX,EAAgBC,IAAhB,CAfM,CAAT;AAiBA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,MAA6BJ,KAAnC;AAEA,SAAO,CAACE,IAAD,EAAOH,IAAI,GAAG,KAAH,GAAWI,SAAtB,EAAiCC,KAAjC,CAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { makeCancelable } from 'utils';\n\nexport default function useAPI(url, fake) {\n  const [state, setState] = useState({\n    data: null,\n    isLoading: true,\n    error: null,\n  });\n\n  useEffect(_ => {\n    if (!fake) {\n      setState(state => ({ ...state, isLoading: true }));\n      const cancelable = makeCancelable(fetch(`${process.env.REACT_APP_API_URI}${url}`).then(res => res.json()));\n\n      cancelable.then(data => {\n        setState({\n          data,\n          isLoading: false,\n          error: null,\n        });\n      }).catch(err => setState(state => ({ ...state, error: err })));\n\n      return _ => cancelable.cancel();\n    }\n  }, [setState, url, fake]);\n\n  const { data, isLoading, error } = state;\n\n  return [data, fake ? false : isLoading, error];\n}\n"]},"metadata":{},"sourceType":"module"}