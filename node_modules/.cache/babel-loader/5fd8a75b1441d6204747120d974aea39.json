{"ast":null,"code":"var _jsxFileName = \"/Users/arslansajid/Documents/Github/corona/covid19-client/src/sections/Historical/Player/Component.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport Box from '@material-ui/core/Box';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Play from '@material-ui/icons/PlayArrow';\nimport Reset from '@material-ui/icons/SettingsBackupRestore';\nimport Pause from '@material-ui/icons/Pause';\nimport IconButton from '@material-ui/core/IconButton';\nimport clsx from 'clsx';\nimport Draggable from 'react-draggable';\nimport useStyles from './styles';\nconst defaultPosition = {\n  x: 0,\n  y: 0\n};\nexport default function Player({\n  status,\n  onChange,\n  value,\n  onDrag,\n  date,\n  onReset\n}) {\n  const [isDraging, setIsDraging] = useState();\n  const [, updateAfterMount] = useState();\n  const classes = useStyles({\n    date,\n    isPlaying: status === 'playing'\n  });\n  const padRef = useRef();\n  useEffect(_ => {\n    updateAfterMount(null);\n  }, [updateAfterMount]);\n  const position = {\n    x: padRef.current ? Math.round((padRef.current.offsetWidth - 20) * value / 100) : 0,\n    y: 0\n  };\n\n  function handleDragStart() {\n    setIsDraging(true);\n  }\n\n  function handleDragStop() {\n    setIsDraging(false);\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    bgcolor: \"background.paper\",\n    className: clsx(classes.root, classes.controls),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, status === 'paused' && value === 100 ? /*#__PURE__*/React.createElement(IconButton, {\n    onClick: onReset,\n    \"aria-label\": status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Reset, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(IconButton, {\n    onClick: onChange,\n    \"aria-label\": status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, status === 'playing' ? /*#__PURE__*/React.createElement(Pause, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(Play, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.progressWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LinearProgress, {\n    variant: \"determinate\",\n    value: value,\n    className: clsx(classes.progress, isDraging && 'without-transition'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Draggable, {\n    axis: \"x\",\n    handle: \".handle\",\n    position: position,\n    defaultPosition: defaultPosition,\n    scale: 1,\n    onDrag: onDrag,\n    onStart: handleDragStart,\n    onStop: handleDragStop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: padRef,\n    \"data-tip\": \"\",\n    className: clsx(classes.pad, 'handle', isDraging && 'without-transition'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/arslansajid/Documents/Github/corona/covid19-client/src/sections/Historical/Player/Component.js"],"names":["React","useState","useRef","useEffect","Box","LinearProgress","Play","Reset","Pause","IconButton","clsx","Draggable","useStyles","defaultPosition","x","y","Player","status","onChange","value","onDrag","date","onReset","isDraging","setIsDraging","updateAfterMount","classes","isPlaying","padRef","_","position","current","Math","round","offsetWidth","handleDragStart","handleDragStop","root","controls","box","progressWrapper","progress","pad"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAOC,KAAP,MAAkB,0CAAlB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,OAAOC,SAAP,MAAsB,UAAtB;AAEA,MAAMC,eAAe,GAAG;AAAEC,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAE;AAAX,CAAxB;AAEA,eAAe,SAASC,MAAT,CAAgB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA,KAApB;AAA2BC,EAAAA,MAA3B;AAAmCC,EAAAA,IAAnC;AAAyCC,EAAAA;AAAzC,CAAhB,EAAoE;AACjF,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,EAA1C;AACA,QAAM,GAAGwB,gBAAH,IAAuBxB,QAAQ,EAArC;AACA,QAAMyB,OAAO,GAAGd,SAAS,CAAC;AAAES,IAAAA,IAAF;AAAQM,IAAAA,SAAS,EAAEV,MAAM,KAAK;AAA9B,GAAD,CAAzB;AAEA,QAAMW,MAAM,GAAG1B,MAAM,EAArB;AAEAC,EAAAA,SAAS,CAAC0B,CAAC,IAAI;AACbJ,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT;AAIA,QAAMK,QAAQ,GAAG;AACfhB,IAAAA,CAAC,EAAEc,MAAM,CAACG,OAAP,GACCC,IAAI,CAACC,KAAL,CAAW,CAACL,MAAM,CAACG,OAAP,CAAeG,WAAf,GAA6B,EAA9B,IAAoCf,KAApC,GAA4C,GAAvD,CADD,GAEC,CAHW;AAIfJ,IAAAA,CAAC,EAAE;AAJY,GAAjB;;AAOA,WAASoB,eAAT,GAA2B;AACzBX,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASY,cAAT,GAA0B;AACxBZ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AAED,sBACE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,OAAO,EAAC,kBAA5B;AAA+C,IAAA,SAAS,EAAEd,IAAI,CAACgB,OAAO,CAACW,IAAT,EAAeX,OAAO,CAACY,QAAvB,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAEZ,OAAO,CAACa,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKtB,MAAM,KAAK,QAAX,IAAuBE,KAAK,KAAK,GAAlC,gBAEI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEG,OAArB;AAA8B,kBAAYL,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,gBAMI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEC,QAArB;AAA+B,kBAAYD,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIA,MAAM,KAAK,SAAX,gBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,gBAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,CARR,eAiBE;AAAK,IAAA,SAAS,EAAES,OAAO,CAACc,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAC,aADV;AAEE,IAAA,KAAK,EAAErB,KAFT;AAGE,IAAA,SAAS,EAAET,IAAI,CAACgB,OAAO,CAACe,QAAT,EAAmBlB,SAAS,IAAI,oBAAhC,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,GADP;AAEE,IAAA,MAAM,EAAC,SAFT;AAGE,IAAA,QAAQ,EAAEO,QAHZ;AAIE,IAAA,eAAe,EAAEjB,eAJnB;AAKE,IAAA,KAAK,EAAE,CALT;AAME,IAAA,MAAM,EAAEO,MANV;AAOE,IAAA,OAAO,EAAEe,eAPX;AAQE,IAAA,MAAM,EAAEC,cARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE;AAAK,IAAA,GAAG,EAAER,MAAV;AAAkB,gBAAS,EAA3B;AAA8B,IAAA,SAAS,EAAElB,IAAI,CAACgB,OAAO,CAACgB,GAAT,EAAc,QAAd,EAAwBnB,SAAS,IAAI,oBAArC,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CANF,CAjBF,CADF,CADF;AAyCD","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Play from '@material-ui/icons/PlayArrow';\nimport Reset from '@material-ui/icons/SettingsBackupRestore';\nimport Pause from '@material-ui/icons/Pause';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport clsx from 'clsx';\nimport Draggable from 'react-draggable';\n\nimport useStyles from './styles';\n\nconst defaultPosition = { x: 0, y: 0 };\n\nexport default function Player({ status, onChange, value, onDrag, date, onReset }) {\n  const [isDraging, setIsDraging] = useState();\n  const [, updateAfterMount] = useState();\n  const classes = useStyles({ date, isPlaying: status === 'playing' });\n\n  const padRef = useRef();\n\n  useEffect(_ => {\n    updateAfterMount(null);\n  }, [updateAfterMount]);\n\n  const position = {\n    x: padRef.current\n      ? Math.round((padRef.current.offsetWidth - 20) * value / 100)\n      : 0,\n    y: 0,\n  };\n\n  function handleDragStart() {\n    setIsDraging(true);\n  }\n\n  function handleDragStop() {\n    setIsDraging(false);\n  }\n\n  return (\n    <Box display=\"flex\" bgcolor=\"background.paper\" className={clsx(classes.root, classes.controls)}>\n      <Box className={classes.box}>\n        {\n          (status === 'paused' && value === 100)\n            ? (\n              <IconButton onClick={onReset} aria-label={status}>\n                <Reset />\n              </IconButton>\n            ) : (\n              <IconButton onClick={onChange} aria-label={status}>\n                {\n                  status === 'playing'\n                    ? <Pause />\n                    : <Play />\n                }\n              </IconButton>\n            )\n        }\n        <div className={classes.progressWrapper}>\n          <LinearProgress\n            variant=\"determinate\"\n            value={value}\n            className={clsx(classes.progress, isDraging && 'without-transition')}\n          />\n          <Draggable\n            axis=\"x\"\n            handle=\".handle\"\n            position={position}\n            defaultPosition={defaultPosition}\n            scale={1}\n            onDrag={onDrag}\n            onStart={handleDragStart}\n            onStop={handleDragStop}\n          >\n            <div ref={padRef} data-tip=\"\" className={clsx(classes.pad, 'handle', isDraging && 'without-transition')}></div>\n          </Draggable>\n        </div>\n      </Box>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}